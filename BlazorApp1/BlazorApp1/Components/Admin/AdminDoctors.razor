@page "/admin/doctors"
@using Microsoft.AspNetCore.Authorization
@inject NavigationManager NavigationManager
@attribute [Authorize(Roles = "admin")]
@attribute [StreamRendering]
@rendermode InteractiveAuto

@inject IDoctorService DoctorService

<PageTitle>Doctors</PageTitle>

<h3>Doctors</h3>

@if  (doctors == null)
{
    <p><em>Loading...</em></p>
}
else if (!doctors.Any())
{
    <p><em>No doctors available.</em></p>
}
else
{
    @* <button @onclick="AddDoctor" class="btn btn-primary">Add Doctor</button> *@
    <h3>Add Doctor</h3>

    <EditForm Model="doctor" FormName="AddDoctor" OnSubmit="HandleSubmit">
        <div>
            <label for="name">First Name</label>
            <InputText id="name" @bind-Value="doctor.Name" class="form-control" />
        </div>
        <div>
            <label for="lastName">Last Name</label>
            <InputText id="lastName" @bind-Value="doctor.LastName" class="form-control" />
        </div>
        <div>
            <label for="specialty">Specialty</label>
            <InputText id="specialty" @bind-Value="doctor.Specialty" class="form-control" />
        </div>
        <div>
            <label for="phone">Phone</label>
            <InputText id="phone" @bind-Value="doctor.Phone" class="form-control" />
        </div>
        <div>
            <label for="email">Email</label>
            <InputText id="email" @bind-Value="doctor.Email" class="form-control" />
        </div>
        <button type="submit" class="btn btn-primary">Submit</button>
    </EditForm>
    <table class="table">
        <thead>
        <tr>
            
            <th>Name</th>
            <th>LastName</th>
            <th>Doctors appointments</th>
        </tr>
        </thead>
        <tbody>
        @foreach (var doctor in doctors)
        {
            <tr>
                
                <td>@doctor.Name</td>
                <td>@doctor.LastName</td>
                @* <td><a href="/admin/doctor/{@doctor.DoctorId}">Subpage</a></td> *@
                <td>@doctor.DoctorId</td>
            </tr>
        }
        </tbody>
    </table>
}

@code {
    List<Doctor> doctors = new List<Doctor>();
    
    protected override async Task OnInitializedAsync()
    {
        doctors = await DoctorService.GetDoctors();
    }
    
    void AddDoctor()
    {
        NavigationManager.NavigateTo("/admin/doctor/add");
    }
    
    [Parameter]
    public int? Id { get; set; }
    private Doctor doctor = new Doctor();
    
    private async Task HandleSubmit()
    {
        // Handle form submission
        await DoctorService.AddDoctor(doctor);
    }

}