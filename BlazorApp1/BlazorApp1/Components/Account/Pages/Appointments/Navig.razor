@page "/Patient/Specialists"

@using System.ComponentModel.DataAnnotations
@using Microsoft.AspNetCore.Identity
@using BlazorApp1.Data
@using Microsoft.EntityFrameworkCore

@inject UserManager<ApplicationUser> UserManager
@inject SignInManager<ApplicationUser> SignInManager
@inject IdentityUserAccessor UserAccessor
@inject IdentityRedirectManager RedirectManager
@inject IAppointmentService AppointmentService
@inject IDoctorService DoctorService

<PageTitle>Profile</PageTitle>

<h3>Profile</h3>
<StatusMessage/>

@foreach (var speciality in specializations)
{
    <div class="form-check">
        <input class="form-check-input" type="checkbox" value="@speciality" id="@speciality" @onchange="@(e => LoadAppointments(speciality, (bool)e.Value))">
        <label class="form-check-label" for="@speciality">@speciality</label>
    </div>

    @if (specialityAppointments.ContainsKey(speciality))
    {
        <ul>
            @foreach (var appointment in specialityAppointments[speciality])
            {
                <li>@appointment.Date</li>
                <li>@appointment.Time</li>
            }
        </ul>
    }
}

@code {
    private ApplicationUser user = default!;
    private string? username;
    private string? phoneNumber;
    private List<Appointment> appointments = new();
    private List<string> specializations = new()
    {
        "Cardiology", "Neurology", "Orthopedics", "Pediatrics",
        "Dermatology", "Gynecology", "Radiology", "Psychiatry",
        "Oncology", "Endocrinology", "General Surgery"
    };

    private Dictionary<string, List<Appointment>> specialityAppointments = new();

    [CascadingParameter]
    private HttpContext HttpContext { get; set; } = default!;

    [SupplyParameterFromForm]
    private InputModel Input { get; set; } = new();

    protected override async Task OnInitializedAsync()
    {
        if (HttpContext == null)
        {
            throw new InvalidOperationException("HttpContext is not provided.");
        }

        user = await UserAccessor.GetRequiredUserAsync(HttpContext);
        username = await UserManager.GetUserNameAsync(user);
        phoneNumber = await UserManager.GetPhoneNumberAsync(user);

        Input.BirthDate ??= user.BirthDate;
        Input.PhoneNumber ??= phoneNumber;
    }

    private async Task LoadAppointments(string specialization, bool isChecked)
    {
        if (isChecked)
        {
            var doctors = await DoctorService.GetDoctors(); // Get the task

            var doctorIds = doctors.Where(d => d.Specialty == specialization)
                .Select(d => d.DoctorId)
                .ToList();

            var allAppointments = await AppointmentService.GetAppointments(); // Get the task

            appointments = appointments.Where(a => doctorIds.Contains(a.DoctorId))
                .ToList();

            specialityAppointments[specialization] = appointments;
        }
        else
        {
            if (specialityAppointments.ContainsKey(specialization))
            {
                specialityAppointments.Remove(specialization);
            }
        }
    }




    

    private sealed class InputModel
    {
        [Phone]
        [Display(Name = "Phone number")]
        public string? PhoneNumber { get; set; }

        [Display(Name = "Birth Date")]
        public DateOnly? BirthDate { get; set; }
    }
}
