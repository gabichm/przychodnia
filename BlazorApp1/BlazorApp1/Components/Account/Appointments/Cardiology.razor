@inject NavigationManager NavigationManager
@inject UserManager<ApplicationUser> UserManager
@inject SignInManager<ApplicationUser> SignInManager
@inject IdentityUserAccessor UserAccessor
@inject IdentityRedirectManager RedirectManager
@inject IAppointmentService appointmentService
@inject IDoctorService DoctorService
@inject AuthenticationStateProvider AuthenticationStateProvider


@if (appointments == null)
{
<p><em>Loading...</em></p>
}
else
{
<EditForm Model="@appointment" FormName="appointmentForm" OnValidSubmit="ScheduleAppointment">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="form-group">
        <label for="date">Date:</label>
        <select id="date" class="form-control" @bind="Input.Date">
            <option value="">Select</option>
            @foreach (var a in appointments)
            {
            <option value="@a.Date">@a.Date</option>
            }
        </select>
    </div>

    <div class="form-group">
        <label for="time">Time:</label>
        <select id="time" class="form-control" @bind="Input.Time">
            <option value="">Select</option>
            @foreach (var a in appointments.Where(a => a.Date == "2024-06-10"))
            {
            <option value="@a.Time">@a.Time</option>
            }
        </select>
    </div>

    <button type="submit" class="btn btn-primary">Submit</button>
</EditForm>
}

@code {
private ApplicationUser user = default!;
private string Id = default!;
private Appointment appointment = new();
public int? appointmentId;
public string? date;
public string? time;
public string? status;
public int? doctorId;
public string? patientId;

[CascadingParameter] private HttpContext HttpContext { get; set; } = default!;

public string Speciality { get; set; } = "Cardiology"; // Default specialization

private List<Appointment> appointments = new();
private List<Doctor> doctors = new();
[SupplyParameterFromForm] private InputModel Input { get; set; } = new();

protected override async Task OnInitializedAsync()
{

    doctors = await DoctorService.GetDoctors();
    var doctorIds = doctors.Where(d => d.Specialty == Speciality)
        .Select(d => d.DoctorId)
        .ToList();

    var allAppointments = await appointmentService.GetAppointments();
    appointments = allAppointments.Where(a => doctorIds.Contains(a.DoctorId) && a.Status == "free")
        .ToList();
    
    Console.WriteLine($"ilosc wizyt: {appointments.Count}");

    user = await UserAccessor.GetRequiredUserAsync(HttpContext);

    Console.WriteLine($"{Input.Date}");
    if (Input.Date == null)
    {
        var firstAppointment = appointments.FirstOrDefault();
        Input.Date ??= firstAppointment?.Date ?? "2024-06-10";
        Input.Time ??= firstAppointment?.Time ?? "10";
        Input.Status ??= firstAppointment?.Status ?? "free";
        Input.DoctorId ??= firstAppointment?.DoctorId ?? 1;
        Input.PatientId ??= user.Id;
    }

}


private async Task ScheduleAppointment()
{
    appointment.Date ??= Input.Date;
    appointment.Time ??= Input.Time;
    appointment.Status ??= "Scheduled";
    // appointment.AppointmentId =  appointments.FirstOrDefault(a => a.Date == appointment.Date && a.Time == appointment.Time).AppointmentId;
    appointment.PatientId ??= user.Id;
    // appointment.DoctorId = 1;
    try
    {
        if (appointments != null)
        {
            foreach (var a in appointments)
            {
                Console.WriteLine($"{a.Date} {a.Time} {a.Status} {a.DoctorId} {a.PatientId}");
            }
            Console.WriteLine($"Selected appointment: {appointment.AppointmentId} {appointment.Time} {appointment.Date}");

            appointment.AppointmentId = appointments.FirstOrDefault(a => a.Date == appointment.Date && a.Time == appointment.Time).AppointmentId;
            
            if(appointment != null)
            {
                
                
                    appointment.Status = "Scheduled";
                    appointment.PatientId = Id;
                    await appointmentService.UpdateAppointment(appointment);
                    NavigationManager.NavigateTo("/Patient/Specialists");
                // }
                // else
                // {
                //     Console.WriteLine("Selected appointment not found.");
                // }
            }
            else
            {
                Console.WriteLine("Selected appointment not found.");
            }
        }
        else
        {
            Console.WriteLine("Appointments list is null.");
        }
    }
    catch (Exception ex)
    {
        Console.WriteLine($"Error scheduling appointment: {ex.Message}");
    }
}

private sealed class InputModel
{
    public int? AppointmentId { get; set; }
    public string? Date { get; set; }
    public string? Time { get; set; }
    public string? Status { get; set; }
    public int? DoctorId { get; set; }
    public string? PatientId { get; set; }
    
}

}
